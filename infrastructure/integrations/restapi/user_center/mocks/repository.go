// Code generated by MockGen. DO NOT EDIT.
// Source: infrastructure/integrations/restapi/user_center/ports/repository.go
//
// Generated by this command:
//
//	mockgen -source=infrastructure/integrations/restapi/user_center/ports/repository.go -destination=infrastructure/integrations/restapi/user_center/mocks/repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/kaolnwza/proj-blueprint/infrastructure/integrations/restapi/user_center/models"
	api "github.com/kaolnwza/proj-blueprint/libs/api"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// ExamExternalApiInqUserKub mocks base method.
func (m *MockRepository) ExamExternalApiInqUserKub(ctx context.Context, req models.ReqInqUser) (api.BaseResponse[models.RespInqUser], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExamExternalApiInqUserKub", ctx, req)
	ret0, _ := ret[0].(api.BaseResponse[models.RespInqUser])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExamExternalApiInqUserKub indicates an expected call of ExamExternalApiInqUserKub.
func (mr *MockRepositoryMockRecorder) ExamExternalApiInqUserKub(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExamExternalApiInqUserKub", reflect.TypeOf((*MockRepository)(nil).ExamExternalApiInqUserKub), ctx, req)
}
